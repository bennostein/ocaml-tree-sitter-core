(*
   Type definitions for representing a raw tree-sitter grammar.json file.

   Allows reading and writing tree-sitter grammars in a type-safe manner.
*)

type ident = string

type grammar = {
  name: ident;
  ?word: ident option; (* token name *)
  ~extras: rule_body list; (* tokens (can only be STRING or PATTERN) *)
  ~inline: ident list; (* rule names *)
  ~conflicts: ident list list; (* list of lists of rule names *)

  (* This is the newer way (tree-sitter >= 0.19) of specifying precedence
     levels, using a partial order over rules instead of a global order using
     global numeric values. *)
  ~precedences: named_prec_level list list;

  (* List of terminal symbols returned by an external C parser, hence not
     defined (but used) in the 'rules' section. *)
  ~externals: rule_body list;

  ~supertypes: ident list; (* rule names *)
  rules: (ident * rule_body) list <json repr="object">;
}

type rule_body = [
  | SYMBOL of ident
  | STRING of string
  | PATTERN of string
  | BLANK
  | REPEAT of rule_body
  | REPEAT1 of rule_body
  | CHOICE of rule_body list
  | SEQ of rule_body list
  | PREC of (prec_value * rule_body)
  | PREC_DYNAMIC of (int * rule_body)
  | PREC_LEFT of (prec_value nullable * rule_body)
  | PREC_RIGHT of (prec_value nullable * rule_body)
  | ALIAS of alias
  | FIELD of (ident * rule_body)

  | IMMEDIATE_TOKEN of rule_body
      (* should parse a constant string or a pattern? *)

  | TOKEN of rule_body
      (* may obey a complex parsing rule but is exposed in the parser output
         as a node without children, i.e. a token. *)

] <json adapter.ocaml="Json_rule_adapter"> (* see Json_rule_adapter.ml *)
  <ocaml repr="classic">

type named_prec_level = [
  | Prec_symbol of ident
  | Prec_string of string
] <json adapter.ocaml="Json_named_prec_level_adapter">
  <ocaml repr="classic">

type prec_value = [
  | Num_prec of int
  | Named_prec of string
] <json adapter.ocaml="Json_prec_value_adapter">
  <ocaml repr="classic">

type alias = {
  (* identifier (named=true) replacing the rule name (content=SYMBOL),
     or string literal (named=false) returned in the parsing output. *)
  value: string;
  named: bool;
  content: rule_body;

  (* Internal to ocaml-tree-sitter.
     This indicates an alias that was introduced during the grammar
     transformation and must be preserved. Aliases from the source grammar
     should not be preserved. *)
  ~must_be_preserved: bool;
}
