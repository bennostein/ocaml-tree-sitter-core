#
# Generic makefile to build and test a parser for a specific language.
#

LANG = $(shell basename "$$(pwd)")
PROJECT_ROOT = $(shell git rev-parse --show-toplevel)
DUNE_BIN = $(PROJECT_ROOT)/bin
NODE_BIN = $(PROJECT_ROOT)/node_modules/.bin
SCRIPTS = $(PROJECT_ROOT)/scripts

# Default to using the tree-sitter executable and library installed locally.
TREESITTER_PREFIX ?= $(PROJECT_ROOT)/tree-sitter
TREESITTER_BINDIR ?= $(TREESITTER_PREFIX)/bin
TREESITTER_LIBDIR ?= $(TREESITTER_PREFIX)/lib

export TREESITTER_LIBDIR
PATH := $(TREESITTER_BINDIR):$(PATH)
export PATH

ifndef GEN_OCAML_OPTIONS
  GEN_OCAML_OPTIONS =
endif

# Build the parsers.
#
.PHONY: build
build:
	$(MAKE) gen
	$(MAKE) build-ocaml

# Only generate source code without compiling it.
#
.PHONY: gen
gen:
	$(MAKE) gen-c
	$(MAKE) gen-ocaml

.PHONY: install
install:
	cd ocaml-src && dune install --root .

# Run the parsers on the collection of input programs in examples/
# Optionally, run the command ./check-test-output to inspect the results
# or run further tests.
#
.PHONY: test
test:
	$(MAKE) parse-examples
	if [ -f 'check-test-output' ]; then ./check-test-output; fi

# A source grammar.json in semgrep-grammars is not required by gen-c, that's
# why the following recipe is complicated.
TS_PARSER_SRC = ../semgrep-grammars/lang/$(LANG)/src/grammar.json
.PHONY: gen-c
gen-c:
	if [ ! -e src/parser.c ] \
          || [ ! -e "$(TS_PARSER_SRC)" ] \
          || [ "$(TS_PARSER_SRC)" -nt src/parser.c ]; then \
	  $(SCRIPTS)/ocaml-tree-sitter-gen-c; \
	else \
	  echo "src/parser.c for $(LANG) is up to date."; \
	fi

.PHONY: gen-ocaml
gen-ocaml: ocaml-src/tree-sitter-lang.opam
ocaml-src/tree-sitter-lang.opam: src/grammar.json
	$(SCRIPTS)/ocaml-tree-sitter-gen-ocaml --lang $(LANG) $(GEN_OCAML_OPTIONS)

.PHONY: build-ocaml
build-ocaml:
	$(SCRIPTS)/build-ocaml
	ln -sf ocaml-src/_build/install/default/bin/parse-$(LANG)
	ln -sf parse-$(LANG) parse

# Parse source using standalone executable and dump OCaml CST
.PHONY: parse-examples
parse-examples:
	$(SCRIPTS)/parse-examples $(LANG)

.PHONY: stat
stat:
	$(SCRIPTS)/lang-stat $(LANG) projects.txt extensions.txt

.PHONY: stat-priv
stat-priv:
	$(SCRIPTS)/lang-stat $(LANG) projects-priv.txt extensions.txt

.PHONY: clean
clean:
	rm -rf stat.tmp
	git clean -dfX
